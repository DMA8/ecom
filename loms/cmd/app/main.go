package main

import (
	"context"
	"fmt"
	"log"
	"log/slog"
	"net"
	"os"
	"os/signal"
	"strings"
	"sync"
	"syscall"
	"time"

	"ecom/cart/pkg/logger"
	"ecom/loms/internal/adapters/grpcadapter"
	"ecom/loms/internal/adapters/kafka/producer"
	"ecom/loms/internal/config"
	"ecom/loms/internal/loms"
	"ecom/loms/internal/repository/order"
	"ecom/loms/internal/repository/stock"
	"ecom/loms/pkg/migrations"

	"github.com/IBM/sarama"
	"github.com/jackc/pgx/v5"
)

/*
1) –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å kafka –∫–ª–∞—Å—Ç–µ—Ä –≤ docker-compose.
2) –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å LOMS —Å –∫–∞—Ñ–∫–æ–π: LOMS –ø–∏—à–µ—Ç –≤ –∫–∞—Ñ–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞).
3) –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–∏—Å –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π(–ø—Ä–æ—Å—Ç–æ main —Å –∫–æ–Ω—Å—å—é–º–µ—Ä –≥—Ä—É–ø–ø–æ–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ).
	–°–µ—Ä–≤–∏—Å –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π –¥–æ–ª–∂–µ–Ω –≤—ã—á–∏—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	–æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ (–ø—Ä–æ—Å—Ç–æ –ø–∏—Å–∞—Ç—å –≤ –ª–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞ –∏ —Å—Ç–∞—Ç—É—Å–æ–º).
4) –û–±–µ—Å–ø–µ—á–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞ (–æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–µ–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä/—Ä–µ–ø–ª–∏–∫–∏, ack –∏ –≤–æ—Ç —ç—Ç–æ –≤—Å–µ).
5) –û–±–µ—Å–ø–µ—á–∏—Ç—å —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–¥–æ–±–∏—Ç—å—Å—è —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ –∑–∞–∫–∞–∑—É –∏ —á—Ç–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø–æ –∑–∞–∫–∞–∑—É).
6) –û–±–µ—Å–ø–µ—áb—Ç—å —Å–µ–º–∞–Ω—Ç–∏–∫—É exectly once (—Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–ª –∫–∞–∫)
7) üíé –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω Outbox.

*/

/*
(Logistics and Order Management System)
–°–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É—á–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –∏ —Å—Ç–æ–∫–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º.
*/
func main() {
	var exitCode int
	wg := &sync.WaitGroup{}

	cfg, err := config.New()
	if err != nil {
		log.Fatal(err)
	}

	logger.SetDefaultLogger(cfg.LogLevel)

	if err := migrations.Migrate(cfg.PSQLConnStr); err != nil {
		log.Println(err)
	}
	slog.Info("migrations ok!")

	ctx, cancelGlobal := context.WithCancel(context.Background())

	psqlConnection, err := initDB(ctx, cfg)
	if err != nil {
		slog.Error(fmt.Sprintf("couln't connect to psql err: %s", err.Error()))
		os.Exit(1)
	}

	repoStock := stock.New(psqlConnection)
	repoOrder := order.New(psqlConnection, repoStock)

	producer, err := producer.New(
		strings.Split(cfg.KafkaBrokers, ";"),
		producer.WithRequiredAcks(sarama.NoResponse),
		producer.WithProducerPartitioner(sarama.NewHashPartitioner),
		producer.WithMaxOpenRequests(5),
		producer.WithMaxRetries(5),
		producer.WithRetryBackoff(10*time.Millisecond),
		producer.WithProducerFlushMessages(3),
		producer.WithProducerFlushFrequency(5*time.Second),
	)
	if err != nil {
		slog.Error(fmt.Sprintf("kafka is not ready: %s", err.Error()))
		os.Exit(1)
	}

	manager := loms.New(repoOrder, repoStock, producer)

	grpcServer := grpcadapter.New(manager)
	servgrpc := grpcServer.Server()

	wg.Add(1)
	go func() {
		defer wg.Done()
		defer func() {
			if r := recover(); r != nil {
				slog.Info("panic recover servgrpc.Serve()", "err", r)
				exitCode = 1
				cancelGlobal()
			}
		}()
		grpcLis, err := net.Listen(cfg.GrpcNetwork, cfg.ServiceURLGrpc)
		if err != nil {
			slog.Error(fmt.Sprintf("couln't create grpc listener err: %s", err.Error()))
			exitCode = 1
			cancelGlobal()
			return
		}
		slog.Info("launching grpc serv", "port", cfg.ServiceURLGrpc)
		if err := servgrpc.Serve(grpcLis); err != nil {
			slog.Error(fmt.Sprintf("couln't run grpc serv err: %s", err.Error()))
			exitCode = 1
		}
		cancelGlobal()
	}()

	wg.Add(1)
	go func() {
		defer wg.Done()
		signals := make(chan os.Signal, 1)
		signal.Notify(signals, syscall.SIGINT, syscall.SIGTERM)

		select {
		case <-ctx.Done():
			slog.Info("context done, shutting down")
		case <-signals:
			slog.Info("got signal, shutting down")
		}
		servgrpc.GracefulStop()
	}()
	wg.Wait()
	slog.Info("shutdown ok!", "exitCode", exitCode)
	os.Exit(exitCode)
}

func initDB(ctx context.Context, cfg *config.Config) (*pgx.Conn, error) {
	const op = "main.initDB"

	psqlConnection, err := pgx.Connect(ctx, cfg.PSQLConnStr)
	if err != nil {
		return nil, fmt.Errorf("%s: %w", op, err)
	}
	if err := psqlConnection.Ping(ctx); err != nil {
		return nil, fmt.Errorf("%s: %w", op, err)
	}

	return psqlConnection, nil
}
