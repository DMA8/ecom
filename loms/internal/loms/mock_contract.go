// Code generated by MockGen. DO NOT EDIT.
// Source: stock.go

// Package loms is a generated GoMock package.
package loms

import (
	context "context"
	reflect "reflect"
	model "ecom/loms/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockStockRepository is a mock of StockRepository interface.
type MockStockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStockRepositoryMockRecorder
}

// MockStockRepositoryMockRecorder is the mock recorder for MockStockRepository.
type MockStockRepositoryMockRecorder struct {
	mock *MockStockRepository
}

// NewMockStockRepository creates a new mock instance.
func NewMockStockRepository(ctrl *gomock.Controller) *MockStockRepository {
	mock := &MockStockRepository{ctrl: ctrl}
	mock.recorder = &MockStockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStockRepository) EXPECT() *MockStockRepositoryMockRecorder {
	return m.recorder
}

// StockQuantity mocks base method.
func (m *MockStockRepository) StockQuantity(ctx context.Context, sku model.SKU) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StockQuantity", ctx, sku)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StockQuantity indicates an expected call of StockQuantity.
func (mr *MockStockRepositoryMockRecorder) StockQuantity(ctx, sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StockQuantity", reflect.TypeOf((*MockStockRepository)(nil).StockQuantity), ctx, sku)
}

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// OrderCancel mocks base method.
func (m *MockOrderRepository) OrderCancel(ctx context.Context, orderPay model.OrderID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderCancel", ctx, orderPay)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrderCancel indicates an expected call of OrderCancel.
func (mr *MockOrderRepositoryMockRecorder) OrderCancel(ctx, orderPay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderCancel", reflect.TypeOf((*MockOrderRepository)(nil).OrderCancel), ctx, orderPay)
}

// OrderCreate mocks base method.
func (m *MockOrderRepository) OrderCreate(ctx context.Context, order model.OrderCreate, user model.User) (model.OrderID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderCreate", ctx, order, user)
	ret0, _ := ret[0].(model.OrderID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderCreate indicates an expected call of OrderCreate.
func (mr *MockOrderRepositoryMockRecorder) OrderCreate(ctx, order, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderCreate", reflect.TypeOf((*MockOrderRepository)(nil).OrderCreate), ctx, order, user)
}

// OrderInfoByOrderID mocks base method.
func (m *MockOrderRepository) OrderInfoByOrderID(ctx context.Context, orderID model.OrderID) (model.OrderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderInfoByOrderID", ctx, orderID)
	ret0, _ := ret[0].(model.OrderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderInfoByOrderID indicates an expected call of OrderInfoByOrderID.
func (mr *MockOrderRepositoryMockRecorder) OrderInfoByOrderID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderInfoByOrderID", reflect.TypeOf((*MockOrderRepository)(nil).OrderInfoByOrderID), ctx, orderID)
}

// OrderPay mocks base method.
func (m *MockOrderRepository) OrderPay(ctx context.Context, orderPay model.OrderID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderPay", ctx, orderPay)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrderPay indicates an expected call of OrderPay.
func (mr *MockOrderRepositoryMockRecorder) OrderPay(ctx, orderPay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderPay", reflect.TypeOf((*MockOrderRepository)(nil).OrderPay), ctx, orderPay)
}

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// SendOrderStatusChanged mocks base method.
func (m *MockProducer) SendOrderStatusChanged(ctx context.Context, order model.OrderChangedMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendOrderStatusChanged", ctx, order)
}

// SendOrderStatusChanged indicates an expected call of SendOrderStatusChanged.
func (mr *MockProducerMockRecorder) SendOrderStatusChanged(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOrderStatusChanged", reflect.TypeOf((*MockProducer)(nil).SendOrderStatusChanged), ctx, order)
}

// MockProductServiceCli is a mock of ProductServiceCli interface.
type MockProductServiceCli struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceCliMockRecorder
}

// MockProductServiceCliMockRecorder is the mock recorder for MockProductServiceCli.
type MockProductServiceCliMockRecorder struct {
	mock *MockProductServiceCli
}

// NewMockProductServiceCli creates a new mock instance.
func NewMockProductServiceCli(ctrl *gomock.Controller) *MockProductServiceCli {
	mock := &MockProductServiceCli{ctrl: ctrl}
	mock.recorder = &MockProductServiceCliMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductServiceCli) EXPECT() *MockProductServiceCliMockRecorder {
	return m.recorder
}

// IsSKUValid mocks base method.
func (m *MockProductServiceCli) IsSKUValid(ctx context.Context, sku model.SKU) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSKUValid", ctx, sku)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsSKUValid indicates an expected call of IsSKUValid.
func (mr *MockProductServiceCliMockRecorder) IsSKUValid(ctx, sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSKUValid", reflect.TypeOf((*MockProductServiceCli)(nil).IsSKUValid), ctx, sku)
}
