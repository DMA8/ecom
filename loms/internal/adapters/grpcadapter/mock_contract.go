// Code generated by MockGen. DO NOT EDIT.
// Source: grpc.go

// Package grpcadapter is a generated GoMock package.
package grpcadapter

import (
	context "context"
	reflect "reflect"
	model "ecom/loms/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockorderManager is a mock of orderManager interface.
type MockorderManager struct {
	ctrl     *gomock.Controller
	recorder *MockorderManagerMockRecorder
}

// MockorderManagerMockRecorder is the mock recorder for MockorderManager.
type MockorderManagerMockRecorder struct {
	mock *MockorderManager
}

// NewMockorderManager creates a new mock instance.
func NewMockorderManager(ctrl *gomock.Controller) *MockorderManager {
	mock := &MockorderManager{ctrl: ctrl}
	mock.recorder = &MockorderManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockorderManager) EXPECT() *MockorderManagerMockRecorder {
	return m.recorder
}

// OrderCancel mocks base method.
func (m *MockorderManager) OrderCancel(ctx context.Context, orderID model.OrderID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderCancel", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrderCancel indicates an expected call of OrderCancel.
func (mr *MockorderManagerMockRecorder) OrderCancel(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderCancel", reflect.TypeOf((*MockorderManager)(nil).OrderCancel), ctx, orderID)
}

// OrderCreate mocks base method.
func (m *MockorderManager) OrderCreate(ctx context.Context, order model.OrderCreate, user model.User) (model.OrderID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderCreate", ctx, order, user)
	ret0, _ := ret[0].(model.OrderID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderCreate indicates an expected call of OrderCreate.
func (mr *MockorderManagerMockRecorder) OrderCreate(ctx, order, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderCreate", reflect.TypeOf((*MockorderManager)(nil).OrderCreate), ctx, order, user)
}

// OrderInfoByOrderID mocks base method.
func (m *MockorderManager) OrderInfoByOrderID(ctx context.Context, orderID model.OrderID) (model.OrderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderInfoByOrderID", ctx, orderID)
	ret0, _ := ret[0].(model.OrderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderInfoByOrderID indicates an expected call of OrderInfoByOrderID.
func (mr *MockorderManagerMockRecorder) OrderInfoByOrderID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderInfoByOrderID", reflect.TypeOf((*MockorderManager)(nil).OrderInfoByOrderID), ctx, orderID)
}

// OrderPay mocks base method.
func (m *MockorderManager) OrderPay(ctx context.Context, orderID model.OrderID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderPay", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrderPay indicates an expected call of OrderPay.
func (mr *MockorderManagerMockRecorder) OrderPay(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderPay", reflect.TypeOf((*MockorderManager)(nil).OrderPay), ctx, orderID)
}

// StockInfo mocks base method.
func (m *MockorderManager) StockInfo(ctx context.Context, sku model.SKU) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StockInfo", ctx, sku)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StockInfo indicates an expected call of StockInfo.
func (mr *MockorderManagerMockRecorder) StockInfo(ctx, sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StockInfo", reflect.TypeOf((*MockorderManager)(nil).StockInfo), ctx, sku)
}
