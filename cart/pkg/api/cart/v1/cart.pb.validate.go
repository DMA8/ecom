// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cart.proto

package grpc_cart

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CartListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CartListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CartListRequestMultiError, or nil if none found.
func (m *CartListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CartListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserID() <= 0 {
		err := CartListRequestValidationError{
			field:  "UserID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CartListRequestMultiError(errors)
	}

	return nil
}

// CartListRequestMultiError is an error wrapping multiple validation errors
// returned by CartListRequest.ValidateAll() if the designated constraints
// aren't met.
type CartListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartListRequestMultiError) AllErrors() []error { return m }

// CartListRequestValidationError is the validation error returned by
// CartListRequest.Validate if the designated constraints aren't met.
type CartListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartListRequestValidationError) ErrorName() string { return "CartListRequestValidationError" }

// Error satisfies the builtin error interface
func (e CartListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartListRequestValidationError{}

// Validate checks the field values on CartListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CartListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CartListResponseMultiError, or nil if none found.
func (m *CartListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CartListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalPrice

	for idx, item := range m.GetCartItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CartListResponseValidationError{
						field:  fmt.Sprintf("CartItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CartListResponseValidationError{
						field:  fmt.Sprintf("CartItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CartListResponseValidationError{
					field:  fmt.Sprintf("CartItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CartListResponseMultiError(errors)
	}

	return nil
}

// CartListResponseMultiError is an error wrapping multiple validation errors
// returned by CartListResponse.ValidateAll() if the designated constraints
// aren't met.
type CartListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartListResponseMultiError) AllErrors() []error { return m }

// CartListResponseValidationError is the validation error returned by
// CartListResponse.Validate if the designated constraints aren't met.
type CartListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartListResponseValidationError) ErrorName() string { return "CartListResponseValidationError" }

// Error satisfies the builtin error interface
func (e CartListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartListResponseValidationError{}

// Validate checks the field values on CartItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CartItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CartItemMultiError, or nil
// if none found.
func (m *CartItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sku

	// no validation rules for Count

	// no validation rules for Name

	// no validation rules for Price

	if len(errors) > 0 {
		return CartItemMultiError(errors)
	}

	return nil
}

// CartItemMultiError is an error wrapping multiple validation errors returned
// by CartItem.ValidateAll() if the designated constraints aren't met.
type CartItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemMultiError) AllErrors() []error { return m }

// CartItemValidationError is the validation error returned by
// CartItem.Validate if the designated constraints aren't met.
type CartItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemValidationError) ErrorName() string { return "CartItemValidationError" }

// Error satisfies the builtin error interface
func (e CartItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemValidationError{}

// Validate checks the field values on CartCheckoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CartCheckoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartCheckoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CartCheckoutRequestMultiError, or nil if none found.
func (m *CartCheckoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CartCheckoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserID() <= 0 {
		err := CartCheckoutRequestValidationError{
			field:  "UserID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CartCheckoutRequestMultiError(errors)
	}

	return nil
}

// CartCheckoutRequestMultiError is an error wrapping multiple validation
// errors returned by CartCheckoutRequest.ValidateAll() if the designated
// constraints aren't met.
type CartCheckoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartCheckoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartCheckoutRequestMultiError) AllErrors() []error { return m }

// CartCheckoutRequestValidationError is the validation error returned by
// CartCheckoutRequest.Validate if the designated constraints aren't met.
type CartCheckoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartCheckoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartCheckoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartCheckoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartCheckoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartCheckoutRequestValidationError) ErrorName() string {
	return "CartCheckoutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CartCheckoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartCheckoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartCheckoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartCheckoutRequestValidationError{}

// Validate checks the field values on CartCheckoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CartCheckoutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartCheckoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CartCheckoutResponseMultiError, or nil if none found.
func (m *CartCheckoutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CartCheckoutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderID

	if len(errors) > 0 {
		return CartCheckoutResponseMultiError(errors)
	}

	return nil
}

// CartCheckoutResponseMultiError is an error wrapping multiple validation
// errors returned by CartCheckoutResponse.ValidateAll() if the designated
// constraints aren't met.
type CartCheckoutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartCheckoutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartCheckoutResponseMultiError) AllErrors() []error { return m }

// CartCheckoutResponseValidationError is the validation error returned by
// CartCheckoutResponse.Validate if the designated constraints aren't met.
type CartCheckoutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartCheckoutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartCheckoutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartCheckoutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartCheckoutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartCheckoutResponseValidationError) ErrorName() string {
	return "CartCheckoutResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CartCheckoutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartCheckoutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartCheckoutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartCheckoutResponseValidationError{}

// Validate checks the field values on CartClearRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CartClearRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartClearRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CartClearRequestMultiError, or nil if none found.
func (m *CartClearRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CartClearRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserID() <= 0 {
		err := CartClearRequestValidationError{
			field:  "UserID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CartClearRequestMultiError(errors)
	}

	return nil
}

// CartClearRequestMultiError is an error wrapping multiple validation errors
// returned by CartClearRequest.ValidateAll() if the designated constraints
// aren't met.
type CartClearRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartClearRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartClearRequestMultiError) AllErrors() []error { return m }

// CartClearRequestValidationError is the validation error returned by
// CartClearRequest.Validate if the designated constraints aren't met.
type CartClearRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartClearRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartClearRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartClearRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartClearRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartClearRequestValidationError) ErrorName() string { return "CartClearRequestValidationError" }

// Error satisfies the builtin error interface
func (e CartClearRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartClearRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartClearRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartClearRequestValidationError{}

// Validate checks the field values on CartClearResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CartClearResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartClearResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CartClearResponseMultiError, or nil if none found.
func (m *CartClearResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CartClearResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CartClearResponseMultiError(errors)
	}

	return nil
}

// CartClearResponseMultiError is an error wrapping multiple validation errors
// returned by CartClearResponse.ValidateAll() if the designated constraints
// aren't met.
type CartClearResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartClearResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartClearResponseMultiError) AllErrors() []error { return m }

// CartClearResponseValidationError is the validation error returned by
// CartClearResponse.Validate if the designated constraints aren't met.
type CartClearResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartClearResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartClearResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartClearResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartClearResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartClearResponseValidationError) ErrorName() string {
	return "CartClearResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CartClearResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartClearResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartClearResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartClearResponseValidationError{}

// Validate checks the field values on ItemAddRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ItemAddRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemAddRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ItemAddRequestMultiError,
// or nil if none found.
func (m *ItemAddRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemAddRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserID() <= 0 {
		err := ItemAddRequestValidationError{
			field:  "UserID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetItemToAdd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemAddRequestValidationError{
					field:  "ItemToAdd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemAddRequestValidationError{
					field:  "ItemToAdd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItemToAdd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemAddRequestValidationError{
				field:  "ItemToAdd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ItemAddRequestMultiError(errors)
	}

	return nil
}

// ItemAddRequestMultiError is an error wrapping multiple validation errors
// returned by ItemAddRequest.ValidateAll() if the designated constraints
// aren't met.
type ItemAddRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemAddRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemAddRequestMultiError) AllErrors() []error { return m }

// ItemAddRequestValidationError is the validation error returned by
// ItemAddRequest.Validate if the designated constraints aren't met.
type ItemAddRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemAddRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemAddRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemAddRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemAddRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemAddRequestValidationError) ErrorName() string { return "ItemAddRequestValidationError" }

// Error satisfies the builtin error interface
func (e ItemAddRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemAddRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemAddRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemAddRequestValidationError{}

// Validate checks the field values on ItemToAdd with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ItemToAdd) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemToAdd with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ItemToAddMultiError, or nil
// if none found.
func (m *ItemToAdd) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemToAdd) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSku() <= 0 {
		err := ItemToAddValidationError{
			field:  "Sku",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCount() <= 0 {
		err := ItemToAddValidationError{
			field:  "Count",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ItemToAddMultiError(errors)
	}

	return nil
}

// ItemToAddMultiError is an error wrapping multiple validation errors returned
// by ItemToAdd.ValidateAll() if the designated constraints aren't met.
type ItemToAddMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemToAddMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemToAddMultiError) AllErrors() []error { return m }

// ItemToAddValidationError is the validation error returned by
// ItemToAdd.Validate if the designated constraints aren't met.
type ItemToAddValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemToAddValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemToAddValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemToAddValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemToAddValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemToAddValidationError) ErrorName() string { return "ItemToAddValidationError" }

// Error satisfies the builtin error interface
func (e ItemToAddValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemToAdd.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemToAddValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemToAddValidationError{}

// Validate checks the field values on ItemAddResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ItemAddResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemAddResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ItemAddResponseMultiError, or nil if none found.
func (m *ItemAddResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemAddResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ItemAddResponseMultiError(errors)
	}

	return nil
}

// ItemAddResponseMultiError is an error wrapping multiple validation errors
// returned by ItemAddResponse.ValidateAll() if the designated constraints
// aren't met.
type ItemAddResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemAddResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemAddResponseMultiError) AllErrors() []error { return m }

// ItemAddResponseValidationError is the validation error returned by
// ItemAddResponse.Validate if the designated constraints aren't met.
type ItemAddResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemAddResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemAddResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemAddResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemAddResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemAddResponseValidationError) ErrorName() string { return "ItemAddResponseValidationError" }

// Error satisfies the builtin error interface
func (e ItemAddResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemAddResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemAddResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemAddResponseValidationError{}

// Validate checks the field values on ItemDeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ItemDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ItemDeleteRequestMultiError, or nil if none found.
func (m *ItemDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserID() <= 0 {
		err := ItemDeleteRequestValidationError{
			field:  "UserID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSku() <= 0 {
		err := ItemDeleteRequestValidationError{
			field:  "Sku",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ItemDeleteRequestMultiError(errors)
	}

	return nil
}

// ItemDeleteRequestMultiError is an error wrapping multiple validation errors
// returned by ItemDeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type ItemDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemDeleteRequestMultiError) AllErrors() []error { return m }

// ItemDeleteRequestValidationError is the validation error returned by
// ItemDeleteRequest.Validate if the designated constraints aren't met.
type ItemDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemDeleteRequestValidationError) ErrorName() string {
	return "ItemDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ItemDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemDeleteRequestValidationError{}

// Validate checks the field values on ItemDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ItemDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ItemDeleteResponseMultiError, or nil if none found.
func (m *ItemDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ItemDeleteResponseMultiError(errors)
	}

	return nil
}

// ItemDeleteResponseMultiError is an error wrapping multiple validation errors
// returned by ItemDeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type ItemDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemDeleteResponseMultiError) AllErrors() []error { return m }

// ItemDeleteResponseValidationError is the validation error returned by
// ItemDeleteResponse.Validate if the designated constraints aren't met.
type ItemDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemDeleteResponseValidationError) ErrorName() string {
	return "ItemDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ItemDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemDeleteResponseValidationError{}
