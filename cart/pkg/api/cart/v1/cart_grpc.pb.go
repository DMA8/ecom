// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: cart.proto

package grpc_cart

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CartService_CartList_FullMethodName     = "/ecom.cart.CartService/CartList"
	CartService_CartCheckout_FullMethodName = "/ecom.cart.CartService/CartCheckout"
	CartService_CartClear_FullMethodName    = "/ecom.cart.CartService/CartClear"
	CartService_ItemAdd_FullMethodName      = "/ecom.cart.CartService/ItemAdd"
	CartService_ItemDelete_FullMethodName   = "/ecom.cart.CartService/ItemDelete"
)

// CartServiceClient is the client API for CartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartServiceClient interface {
	CartList(ctx context.Context, in *CartListRequest, opts ...grpc.CallOption) (*CartListResponse, error)
	CartCheckout(ctx context.Context, in *CartCheckoutRequest, opts ...grpc.CallOption) (*CartCheckoutResponse, error)
	CartClear(ctx context.Context, in *CartClearRequest, opts ...grpc.CallOption) (*CartClearResponse, error)
	ItemAdd(ctx context.Context, in *ItemAddRequest, opts ...grpc.CallOption) (*ItemAddResponse, error)
	ItemDelete(ctx context.Context, in *ItemDeleteRequest, opts ...grpc.CallOption) (*ItemDeleteResponse, error)
}

type cartServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCartServiceClient(cc grpc.ClientConnInterface) CartServiceClient {
	return &cartServiceClient{cc}
}

func (c *cartServiceClient) CartList(ctx context.Context, in *CartListRequest, opts ...grpc.CallOption) (*CartListResponse, error) {
	out := new(CartListResponse)
	err := c.cc.Invoke(ctx, CartService_CartList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) CartCheckout(ctx context.Context, in *CartCheckoutRequest, opts ...grpc.CallOption) (*CartCheckoutResponse, error) {
	out := new(CartCheckoutResponse)
	err := c.cc.Invoke(ctx, CartService_CartCheckout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) CartClear(ctx context.Context, in *CartClearRequest, opts ...grpc.CallOption) (*CartClearResponse, error) {
	out := new(CartClearResponse)
	err := c.cc.Invoke(ctx, CartService_CartClear_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) ItemAdd(ctx context.Context, in *ItemAddRequest, opts ...grpc.CallOption) (*ItemAddResponse, error) {
	out := new(ItemAddResponse)
	err := c.cc.Invoke(ctx, CartService_ItemAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) ItemDelete(ctx context.Context, in *ItemDeleteRequest, opts ...grpc.CallOption) (*ItemDeleteResponse, error) {
	out := new(ItemDeleteResponse)
	err := c.cc.Invoke(ctx, CartService_ItemDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartServiceServer is the server API for CartService service.
// All implementations must embed UnimplementedCartServiceServer
// for forward compatibility
type CartServiceServer interface {
	CartList(context.Context, *CartListRequest) (*CartListResponse, error)
	CartCheckout(context.Context, *CartCheckoutRequest) (*CartCheckoutResponse, error)
	CartClear(context.Context, *CartClearRequest) (*CartClearResponse, error)
	ItemAdd(context.Context, *ItemAddRequest) (*ItemAddResponse, error)
	ItemDelete(context.Context, *ItemDeleteRequest) (*ItemDeleteResponse, error)
	mustEmbedUnimplementedCartServiceServer()
}

// UnimplementedCartServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCartServiceServer struct {
}

func (UnimplementedCartServiceServer) CartList(context.Context, *CartListRequest) (*CartListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CartList not implemented")
}
func (UnimplementedCartServiceServer) CartCheckout(context.Context, *CartCheckoutRequest) (*CartCheckoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CartCheckout not implemented")
}
func (UnimplementedCartServiceServer) CartClear(context.Context, *CartClearRequest) (*CartClearResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CartClear not implemented")
}
func (UnimplementedCartServiceServer) ItemAdd(context.Context, *ItemAddRequest) (*ItemAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemAdd not implemented")
}
func (UnimplementedCartServiceServer) ItemDelete(context.Context, *ItemDeleteRequest) (*ItemDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemDelete not implemented")
}
func (UnimplementedCartServiceServer) mustEmbedUnimplementedCartServiceServer() {}

// UnsafeCartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartServiceServer will
// result in compilation errors.
type UnsafeCartServiceServer interface {
	mustEmbedUnimplementedCartServiceServer()
}

func RegisterCartServiceServer(s grpc.ServiceRegistrar, srv CartServiceServer) {
	s.RegisterService(&CartService_ServiceDesc, srv)
}

func _CartService_CartList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).CartList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_CartList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).CartList(ctx, req.(*CartListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_CartCheckout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartCheckoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).CartCheckout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_CartCheckout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).CartCheckout(ctx, req.(*CartCheckoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_CartClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).CartClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_CartClear_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).CartClear(ctx, req.(*CartClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_ItemAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).ItemAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_ItemAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).ItemAdd(ctx, req.(*ItemAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_ItemDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).ItemDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_ItemDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).ItemDelete(ctx, req.(*ItemDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CartService_ServiceDesc is the grpc.ServiceDesc for CartService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ecom.cart.CartService",
	HandlerType: (*CartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CartList",
			Handler:    _CartService_CartList_Handler,
		},
		{
			MethodName: "CartCheckout",
			Handler:    _CartService_CartCheckout_Handler,
		},
		{
			MethodName: "CartClear",
			Handler:    _CartService_CartClear_Handler,
		},
		{
			MethodName: "ItemAdd",
			Handler:    _CartService_ItemAdd_Handler,
		},
		{
			MethodName: "ItemDelete",
			Handler:    _CartService_ItemDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cart.proto",
}
